generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  favoriteIds    Int[] 

  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
  propertyLists  PropertyList[]  // New relation to PropertyList
}

model PropertyList {
  id        Int       @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings  Listing[] @relation(references: [id], onDelete: Cascade)
}

model Listing {
  id                        Int           @id @default(autoincrement())
  userId                    Int
  title                     String
  description               String
  imageSrc                  String
  category                  String
  roomCount                 Int
  bathroomCount             Int
  guestCount                Int
  latitude                  Float?
  longitude                 Float?
  price                     Int
  createdAt                 DateTime      @default(now())
  agentWebsite              String?   
  notes                     String?   
  hasSwimmingPool           Boolean?  
  hasGarage                 Boolean?  
  numberOfOtherBuildings    Int?    
  numberOfHabitableBuildings Int? 
  landSize                  Float?    
  arableLandSize            Float?
  arableLandSizeUnit        String?   
  garageSpaces              Int?      
  hasOtherBuildings         Boolean?  
  hasArableLand             Boolean?  
  isPublic                  Boolean     @default(false)
  extractedInfo             String?

  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations              Reservation[]
  propertyLists             PropertyList[] @relation(references: [id], onDelete: Cascade)
}

model Reservation {
  id         Int      @id @default(autoincrement())
  userId     Int
  listingId  Int
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
